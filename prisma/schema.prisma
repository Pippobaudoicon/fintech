// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPPORT
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  PAYMENT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum KYCStatus {
  NOT_STARTED
  IN_PROGRESS
  APPROVED
  REJECTED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  phone       String?
  dateOfBirth DateTime?
  address     String?
  city        String?
  country     String?
  postalCode  String?
  password    String
  role        UserRole @default(CUSTOMER)
  kycStatus   KYCStatus @default(NOT_STARTED)
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  accounts     Account[]
  transactions Transaction[]
  sessions     Session[]
  notifications Notification[]
  auditLogs    AuditLog[]

  @@map("users")
}

model Account {
  id            String      @id @default(cuid())
  accountNumber String      @unique
  accountType   AccountType
  balance       Decimal     @default(0) @db.Decimal(15, 2)
  currency      String      @default("USD")
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  userId              String
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionsFrom    Transaction[] @relation("FromAccount")
  transactionsTo      Transaction[] @relation("ToAccount")

  @@map("accounts")
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Decimal           @db.Decimal(15, 2)
  currency    String            @default("USD")
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  reference   String?           @unique
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccountId String?
  fromAccount   Account? @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccountId   String?
  toAccount     Account? @relation("ToAccount", fields: [toAccountId], references: [id])

  @@map("transactions")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   @default("info")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
